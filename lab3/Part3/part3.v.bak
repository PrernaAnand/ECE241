module ALU(SW, LEDR, HEX, KEY);
  input [7:0] SW;
  input [2:0] KEY;
  output [7:] LEDR;
  output [5:0] HEX0;
  
endmodule

module ALUCases(A, B, Out);
   input A, B;
	output reg Out;
	
	always @(*) // declare always block
	begin
	case (function) // start case statement
	0: A + B using the adder from Part II of this Lab
	1: A + B using the Verilog ‘+’ operator
	2: A NAND B in the lower four bits of ALUout and A NOR B in the upper four bits
	3: Output 8’b11000000 if at least 1 of the 8 bits in the two inputs is 1 (use a single OR operation)
	4: Output 8’b00111111 if exactly 2 bits of the A switches are 1, and exactly 3 bits of the B switches are 1
	5: Display the B switches in the most significant four bits of ALUout and the complement of the A switches
	in the least-significant four bits without complementing the bits individually
	6: A XNOR B in the lower four bits and A XOR B in the upper four bits
	default: : : : // default case
	endcase
	end
endmodule