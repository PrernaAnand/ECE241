module part1


module TFF_&_AND(Clock, Clear_b, Enable, Q);
  input Clock, Clear_b, Enable;
  output Q;
  wire w1
  
  TFF T1(.Clock(CLock), .Clear_b(Clear_b), .Enable(Enable), .Q(Q));
  and(w1, Q, Enable);

endmodule


module TFF(Clock, Clear_b, Enable, Q); //TFF
  input Clock, CLear_b, Enable;
  output reg Q;
  
  always@(posedge Clock) // 0 to 1
   if(!Clear_b) // if reset is 1 set - everything is set to 0 - concurrently
	  Q <= 0;
	else if(Enable)
     Q <= Q + 1; //else if enable is 1 - You add 1 
	  
endmodule


module HEX(in, out); //HEX
  
	 input [3:0] in;
	 reg [6:0] out_wire;
	 output [6:0] out = ~out_wire;
	  
	 always@(*)
	 begin
	 case (in)
		0: out_wire = 7'b0111111;
		1: out_wire = 7'b0000110;
		2: out_wire = 7'b1011011;
		3: out_wire = 7'b1001111;
		4: out_wire = 7'b1100110;
		5: out_wire = 7'b1101101;
		6: out_wire = 7'b1111101;
		7: out_wire = 7'b0000111;
		8: out_wire = 7'b1111111;
		9: out_wire = 7'b1100111;
		10: out_wire = 7'b1110111;
		11: out_wire = 7'b1111100;
		12: out_wire = 7'b0111001;
		13: out_wire = 7'b1011110;
		14: out_wire = 7'b1111001;
		15: out_wire = 7'b1110001;
	 endcase
	 end
	 
endmodule
