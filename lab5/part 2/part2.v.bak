module part2 (HEX, SW, KEY, CLOCK_50);

	input [1:0] SW //these are for the clock
	input [1:0] KEY //remove 
	input CLOCK_50; 
	output HEX0;

	wire d, clock, outm, enable, pulse;
	wire [25:0] q; //you need 26 bits to count till 50 million clock cycles

	assign clock = CLOCK_50;
	assign enable = (pulse == 26'b000000000000000000) 1:0; 
	
	mux m1 (.c1(SW[1], .c0(SW[0]), .muxOut(q));
	rateDivideCount c1(.d(q), .Q(pulse), .clk(clock));
	upcounter_4bits c2 (.CLK(clock), .en(enable), .dig(out)); 
	

endmodule 

module mux (c1, c0, muxOut);
	input c1, c0;
	output reg [25:0] muxOUt;

	always @ (*)
	begin
		if (c1 == 'b0 & c2 == 'b0)
		muxOut = 'b000000000000000000; //assign with no of bits - 1
		else if (c1 == 'b0 && c0 == 'b1)
		muxOut = 101111101011110000011111;		//counts 12.5M clock cycles for 4Hz signals
		else if (c1 == 'b1 && c0 == 'b0)
		muxOut = 'b01011111010111100000111111;
		else if (c1 == 'b1 && c1 == 'b1)
		muxOut = 'b10111110101111000001111111; //counts 50M clock cycles for 1Hz signals 
	end

endmodule 
		
module rateDivideCount (d, Q, clk);
	input d, clock; 
	output Q; 

	assign Q = d/clk; //calculates pulse width
	
	
	
endmodule 

module upcounter_4bits (CLOCK, en, dig);
	input en, CLOCK;
	output [3:0] dig;
	
	always@(posedge CLOCK)
	begin
	
	if (en == 1'b1)
	dig <= dig + 1; 
	
	else if( 
	
	
	
endmodule


	


		